//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
export class ApiClientBase{
    baseApiUrl: string  = "https://localhost:44386";
    protected async transformOptions(options: RequestInit): Promise<RequestInit>{
        const token = '';
        options.headers = { ...options.headers, authorization: `Bearer ${token}`};
        return Promise.resolve(options);
    }

    protected  transformResult(url: string, response: Response, processor: (response: Response) => any){
        return processor(response);
    }

    protected getBaseUrl(defaultUrl: string, baseUrl?: string){
        return this.baseApiUrl;
    }
}
export class Client extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @return Success
     */
    listAccounts(): Promise<BussinesAccountDetailsModel[]> {
        let url_ = this.baseUrl + "/api/BussinesAccount/list-accounts";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListAccounts(_response));
        });
    }

    protected processListAccounts(response: Response): Promise<BussinesAccountDetailsModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BussinesAccountDetailsModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BussinesAccountDetailsModel[]>(null as any);
    }

    /**
     * @return Success
     */
    detailsAccount(idBussinesAccount: number): Promise<BussinesAccountDetailsModel> {
        let url_ = this.baseUrl + "/api/BussinesAccount/details-account/{idBussinesAccount}";
        if (idBussinesAccount === undefined || idBussinesAccount === null)
            throw new Error("The parameter 'idBussinesAccount' must be defined.");
        url_ = url_.replace("{idBussinesAccount}", encodeURIComponent("" + idBussinesAccount));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDetailsAccount(_response));
        });
    }

    protected processDetailsAccount(response: Response): Promise<BussinesAccountDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BussinesAccountDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BussinesAccountDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    historyAccount(idBussinesAccount: number): Promise<BussinesAccountHistoryDetailsModel[]> {
        let url_ = this.baseUrl + "/api/BussinesAccount/history-account/{idBussinesAccount}";
        if (idBussinesAccount === undefined || idBussinesAccount === null)
            throw new Error("The parameter 'idBussinesAccount' must be defined.");
        url_ = url_.replace("{idBussinesAccount}", encodeURIComponent("" + idBussinesAccount));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processHistoryAccount(_response));
        });
    }

    protected processHistoryAccount(response: Response): Promise<BussinesAccountHistoryDetailsModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BussinesAccountHistoryDetailsModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BussinesAccountHistoryDetailsModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registerNewAccount(body: BussinesAccountCreateModel | undefined): Promise<BussinesAccountDetailsModel> {
        let url_ = this.baseUrl + "/api/BussinesAccount/register-new-account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRegisterNewAccount(_response));
        });
    }

    protected processRegisterNewAccount(response: Response): Promise<BussinesAccountDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BussinesAccountDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BussinesAccountDetailsModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editAccount(idBussinesAccount: number, body: BussinesAccountUpdateModel | undefined): Promise<BussinesAccountDetailsModel> {
        let url_ = this.baseUrl + "/api/BussinesAccount/edit-account/{idBussinesAccount}";
        if (idBussinesAccount === undefined || idBussinesAccount === null)
            throw new Error("The parameter 'idBussinesAccount' must be defined.");
        url_ = url_.replace("{idBussinesAccount}", encodeURIComponent("" + idBussinesAccount));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processEditAccount(_response));
        });
    }

    protected processEditAccount(response: Response): Promise<BussinesAccountDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BussinesAccountDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BussinesAccountDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    listCustomers(): Promise<CustomerDetailsModel[]> {
        let url_ = this.baseUrl + "/api/Customer/list-customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListCustomers(_response));
        });
    }

    protected processListCustomers(response: Response): Promise<CustomerDetailsModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CustomerDetailsModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerDetailsModel[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registerCustomer(body: CustomerCreateModel | undefined): Promise<CustomerDetailsModel> {
        let url_ = this.baseUrl + "/api/Customer/register-customer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRegisterCustomer(_response));
        });
    }

    protected processRegisterCustomer(response: Response): Promise<CustomerDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    detailsCustomer(customerNumber: number): Promise<CustomerDetailsModel> {
        let url_ = this.baseUrl + "/api/Customer/details-customer/{customerNumber}";
        if (customerNumber === undefined || customerNumber === null)
            throw new Error("The parameter 'customerNumber' must be defined.");
        url_ = url_.replace("{customerNumber}", encodeURIComponent("" + customerNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDetailsCustomer(_response));
        });
    }

    protected processDetailsCustomer(response: Response): Promise<CustomerDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerDetailsModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editCustomer(customerNumber: number, body: CustomerUpdateModel | undefined): Promise<CustomerDetailsModel> {
        let url_ = this.baseUrl + "/api/Customer/edit-customer/{customerNumber}";
        if (customerNumber === undefined || customerNumber === null)
            throw new Error("The parameter 'customerNumber' must be defined.");
        url_ = url_.replace("{customerNumber}", encodeURIComponent("" + customerNumber));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processEditCustomer(_response));
        });
    }

    protected processEditCustomer(response: Response): Promise<CustomerDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CustomerDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    itemDetails(itemCode: string | null): Promise<PurchaseOrderItemDetailsModel> {
        let url_ = this.baseUrl + "/api/Item/item-details/{itemCode}";
        if (itemCode === undefined || itemCode === null)
            throw new Error("The parameter 'itemCode' must be defined.");
        url_ = url_.replace("{itemCode}", encodeURIComponent("" + itemCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processItemDetails(_response));
        });
    }

    protected processItemDetails(response: Response): Promise<PurchaseOrderItemDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PurchaseOrderItemDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PurchaseOrderItemDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    listOrdersActive(): Promise<SalesOrderDetailsModel[]> {
        let url_ = this.baseUrl + "/api/SalesOrder/list-orders-active";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListOrdersActive(_response));
        });
    }

    protected processListOrdersActive(response: Response): Promise<SalesOrderDetailsModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SalesOrderDetailsModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderDetailsModel[]>(null as any);
    }

    /**
     * @return Success
     */
    listOrdersByCustomer(customerNumber: number): Promise<SalesOrderDetailsModel[]> {
        let url_ = this.baseUrl + "/api/SalesOrder/list-orders-by-customer/{customerNumber}";
        if (customerNumber === undefined || customerNumber === null)
            throw new Error("The parameter 'customerNumber' must be defined.");
        url_ = url_.replace("{customerNumber}", encodeURIComponent("" + customerNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processListOrdersByCustomer(_response));
        });
    }

    protected processListOrdersByCustomer(response: Response): Promise<SalesOrderDetailsModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SalesOrderDetailsModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderDetailsModel[]>(null as any);
    }

    /**
     * @return Success
     */
    detailsOrder(docNum: number): Promise<SalesOrderDetailsFullModel> {
        let url_ = this.baseUrl + "/api/SalesOrder/details-order/{docNum}";
        if (docNum === undefined || docNum === null)
            throw new Error("The parameter 'docNum' must be defined.");
        url_ = url_.replace("{docNum}", encodeURIComponent("" + docNum));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDetailsOrder(_response));
        });
    }

    protected processDetailsOrder(response: Response): Promise<SalesOrderDetailsFullModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesOrderDetailsFullModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderDetailsFullModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registerOrder(body: SalesOrderCreateModel | undefined): Promise<SalesOrderDetailsFullModel> {
        let url_ = this.baseUrl + "/api/SalesOrder/register-order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRegisterOrder(_response));
        });
    }

    protected processRegisterOrder(response: Response): Promise<SalesOrderDetailsFullModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesOrderDetailsFullModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderDetailsFullModel>(null as any);
    }

    /**
     * @return Success
     */
    cancelOrder(docNum: number): Promise<void> {
        let url_ = this.baseUrl + "/api/SalesOrder/cancel-order/{docNum}";
        if (docNum === undefined || docNum === null)
            throw new Error("The parameter 'docNum' must be defined.");
        url_ = url_.replace("{docNum}", encodeURIComponent("" + docNum));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCancelOrder(_response));
        });
    }

    protected processCancelOrder(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param paymentMethod (optional) 
     * @return Success
     */
    completeOrder(docNum: number, paymentMethod: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/SalesOrder/complete-order/{docNum}?";
        if (docNum === undefined || docNum === null)
            throw new Error("The parameter 'docNum' must be defined.");
        url_ = url_.replace("{docNum}", encodeURIComponent("" + docNum));
        if (paymentMethod !== undefined && paymentMethod !== null)
            url_ += "paymentMethod=" + encodeURIComponent("" + paymentMethod) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCompleteOrder(_response));
        });
    }

    protected processCompleteOrder(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addNewlineOrder(docNum: number, body: SalesOrderItemCreateModel | undefined): Promise<SalesOrderItemDetailsModel> {
        let url_ = this.baseUrl + "/api/SalesOrder/addNewline-order/{docNum}";
        if (docNum === undefined || docNum === null)
            throw new Error("The parameter 'docNum' must be defined.");
        url_ = url_.replace("{docNum}", encodeURIComponent("" + docNum));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processAddNewlineOrder(_response));
        });
    }

    protected processAddNewlineOrder(response: Response): Promise<SalesOrderItemDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesOrderItemDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderItemDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    detailslineOrder(docNum: number, itemCode: string | null): Promise<SalesOrderItemDetailsModel> {
        let url_ = this.baseUrl + "/api/SalesOrder/detailsline-order/{docNum}/{itemCode}";
        if (docNum === undefined || docNum === null)
            throw new Error("The parameter 'docNum' must be defined.");
        url_ = url_.replace("{docNum}", encodeURIComponent("" + docNum));
        if (itemCode === undefined || itemCode === null)
            throw new Error("The parameter 'itemCode' must be defined.");
        url_ = url_.replace("{itemCode}", encodeURIComponent("" + itemCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDetailslineOrder(_response));
        });
    }

    protected processDetailslineOrder(response: Response): Promise<SalesOrderItemDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesOrderItemDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderItemDetailsModel>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editlineOrder(docNum: number, itemCode: string | null, body: SalesOrderItemUpdateModel | undefined): Promise<SalesOrderItemDetailsModel> {
        let url_ = this.baseUrl + "/api/SalesOrder/editline-order/{docNum}/{itemCode}";
        if (docNum === undefined || docNum === null)
            throw new Error("The parameter 'docNum' must be defined.");
        url_ = url_.replace("{docNum}", encodeURIComponent("" + docNum));
        if (itemCode === undefined || itemCode === null)
            throw new Error("The parameter 'itemCode' must be defined.");
        url_ = url_.replace("{itemCode}", encodeURIComponent("" + itemCode));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processEditlineOrder(_response));
        });
    }

    protected processEditlineOrder(response: Response): Promise<SalesOrderItemDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesOrderItemDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderItemDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    deletelineOrder(docNum: number, itemCode: string | null): Promise<SalesOrderItemDetailsModel> {
        let url_ = this.baseUrl + "/api/SalesOrder/deleteline-order/{docNum}/{itemCode}";
        if (docNum === undefined || docNum === null)
            throw new Error("The parameter 'docNum' must be defined.");
        url_ = url_.replace("{docNum}", encodeURIComponent("" + docNum));
        if (itemCode === undefined || itemCode === null)
            throw new Error("The parameter 'itemCode' must be defined.");
        url_ = url_.replace("{itemCode}", encodeURIComponent("" + itemCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeletelineOrder(_response));
        });
    }

    protected processDeletelineOrder(response: Response): Promise<SalesOrderItemDetailsModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesOrderItemDetailsModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SalesOrderItemDetailsModel>(null as any);
    }

    /**
     * @return Success
     */
    weatherForecast(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processWeatherForecast(_response));
        });
    }

    protected processWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class BussinesAccountDetailsModel implements IBussinesAccountDetailsModel {
    id?: number;
    accountName?: string | undefined;
    balance?: number;
    comments?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;

    constructor(data?: IBussinesAccountDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accountName = _data["accountName"];
            this.balance = _data["balance"];
            this.comments = _data["comments"];
            this.createdBy = _data["createdBy"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
        }
    }

    static fromJS(data: any): BussinesAccountDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new BussinesAccountDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountName"] = this.accountName;
        data["balance"] = this.balance;
        data["comments"] = this.comments;
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        return data;
    }
}

export interface IBussinesAccountDetailsModel {
    id?: number;
    accountName?: string | undefined;
    balance?: number;
    comments?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class BussinesAccountHistoryDetailsModel implements IBussinesAccountHistoryDetailsModel {
    id?: number;
    bussinesAccount?: number;
    total?: number;
    historyType?: string | undefined;
    docRefType?: string | undefined;
    docRefNum?: number;
    comments?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;

    constructor(data?: IBussinesAccountHistoryDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bussinesAccount = _data["bussinesAccount"];
            this.total = _data["total"];
            this.historyType = _data["historyType"];
            this.docRefType = _data["docRefType"];
            this.docRefNum = _data["docRefNum"];
            this.comments = _data["comments"];
            this.createdBy = _data["createdBy"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
        }
    }

    static fromJS(data: any): BussinesAccountHistoryDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new BussinesAccountHistoryDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bussinesAccount"] = this.bussinesAccount;
        data["total"] = this.total;
        data["historyType"] = this.historyType;
        data["docRefType"] = this.docRefType;
        data["docRefNum"] = this.docRefNum;
        data["comments"] = this.comments;
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        return data;
    }
}

export interface IBussinesAccountHistoryDetailsModel {
    id?: number;
    bussinesAccount?: number;
    total?: number;
    historyType?: string | undefined;
    docRefType?: string | undefined;
    docRefNum?: number;
    comments?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;
}

export class BussinesAccountCreateModel implements IBussinesAccountCreateModel {
    accountName?: string | undefined;
    comments?: string | undefined;

    constructor(data?: IBussinesAccountCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountName = _data["accountName"];
            this.comments = _data["comments"];
        }
    }

    static fromJS(data: any): BussinesAccountCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new BussinesAccountCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountName"] = this.accountName;
        data["comments"] = this.comments;
        return data;
    }
}

export interface IBussinesAccountCreateModel {
    accountName?: string | undefined;
    comments?: string | undefined;
}

export class BussinesAccountUpdateModel implements IBussinesAccountUpdateModel {
    id?: number;
    accountName?: string | undefined;
    comments?: string | undefined;

    constructor(data?: IBussinesAccountUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accountName = _data["accountName"];
            this.comments = _data["comments"];
        }
    }

    static fromJS(data: any): BussinesAccountUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new BussinesAccountUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountName"] = this.accountName;
        data["comments"] = this.comments;
        return data;
    }
}

export interface IBussinesAccountUpdateModel {
    id?: number;
    accountName?: string | undefined;
    comments?: string | undefined;
}

export class CustomerDetailsModel implements ICustomerDetailsModel {
    id?: number;
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    group1?: number;
    group2?: number;
    group3?: number;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;

    constructor(data?: ICustomerDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.group1 = _data["group1"];
            this.group2 = _data["group2"];
            this.group3 = _data["group3"];
            this.createdBy = _data["createdBy"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
        }
    }

    static fromJS(data: any): CustomerDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["group1"] = this.group1;
        data["group2"] = this.group2;
        data["group3"] = this.group3;
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        return data;
    }
}

export interface ICustomerDetailsModel {
    id?: number;
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    group1?: number;
    group2?: number;
    group3?: number;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;
}

export class CustomerCreateModel implements ICustomerCreateModel {
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    group1?: number;
    group2?: number;
    group3?: number;

    constructor(data?: ICustomerCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.group1 = _data["group1"];
            this.group2 = _data["group2"];
            this.group3 = _data["group3"];
        }
    }

    static fromJS(data: any): CustomerCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["group1"] = this.group1;
        data["group2"] = this.group2;
        data["group3"] = this.group3;
        return data;
    }
}

export interface ICustomerCreateModel {
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    group1?: number;
    group2?: number;
    group3?: number;
}

export class CustomerUpdateModel implements ICustomerUpdateModel {
    id?: number;
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    group1?: number;
    group2?: number;
    group3?: number;

    constructor(data?: ICustomerUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.group1 = _data["group1"];
            this.group2 = _data["group2"];
            this.group3 = _data["group3"];
        }
    }

    static fromJS(data: any): CustomerUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["group1"] = this.group1;
        data["group2"] = this.group2;
        data["group3"] = this.group3;
        return data;
    }
}

export interface ICustomerUpdateModel {
    id?: number;
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    group1?: number;
    group2?: number;
    group3?: number;
}

export class PurchaseOrderItemDetailsModel implements IPurchaseOrderItemDetailsModel {
    typeItem?: string | undefined;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    publicPrice?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    weightItem?: number;
    priceByGrs?: number;
    priceSale?: number;
    totalRevenue?: number;
    factorRevenue?: number;
    comments?: string | undefined;
    createdBy?: string | undefined;
    isSold?: boolean;
    createdAt?: string;
    updatedAt?: string;
    descriptionItem?: string | undefined;

    constructor(data?: IPurchaseOrderItemDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeItem = _data["typeItem"];
            this.itemCode = _data["itemCode"];
            this.unitPrice = _data["unitPrice"];
            this.quantity = _data["quantity"];
            this.total = _data["total"];
            this.publicPrice = _data["publicPrice"];
            this.lineNum = _data["lineNum"];
            this.reference1 = _data["reference1"];
            this.reference2 = _data["reference2"];
            this.weightItem = _data["weightItem"];
            this.priceByGrs = _data["priceByGrs"];
            this.priceSale = _data["priceSale"];
            this.totalRevenue = _data["totalRevenue"];
            this.factorRevenue = _data["factorRevenue"];
            this.comments = _data["comments"];
            this.createdBy = _data["createdBy"];
            this.isSold = _data["isSold"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
            this.descriptionItem = _data["descriptionItem"];
        }
    }

    static fromJS(data: any): PurchaseOrderItemDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderItemDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeItem"] = this.typeItem;
        data["itemCode"] = this.itemCode;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        data["total"] = this.total;
        data["publicPrice"] = this.publicPrice;
        data["lineNum"] = this.lineNum;
        data["reference1"] = this.reference1;
        data["reference2"] = this.reference2;
        data["weightItem"] = this.weightItem;
        data["priceByGrs"] = this.priceByGrs;
        data["priceSale"] = this.priceSale;
        data["totalRevenue"] = this.totalRevenue;
        data["factorRevenue"] = this.factorRevenue;
        data["comments"] = this.comments;
        data["createdBy"] = this.createdBy;
        data["isSold"] = this.isSold;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        data["descriptionItem"] = this.descriptionItem;
        return data;
    }
}

export interface IPurchaseOrderItemDetailsModel {
    typeItem?: string | undefined;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    publicPrice?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    weightItem?: number;
    priceByGrs?: number;
    priceSale?: number;
    totalRevenue?: number;
    factorRevenue?: number;
    comments?: string | undefined;
    createdBy?: string | undefined;
    isSold?: boolean;
    createdAt?: string;
    updatedAt?: string;
    descriptionItem?: string | undefined;
}

export class SalesOrderDetailsModel implements ISalesOrderDetailsModel {
    docNum?: number;
    customer?: CustomerDetailsModel;
    docDate?: string;
    docTotal?: number;
    docStatus?: string | undefined;
    canceled?: boolean;
    candeledDate?: string;
    canceledBy?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;
    methodPayment?: string | undefined;

    constructor(data?: ISalesOrderDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.docNum = _data["docNum"];
            this.customer = _data["customer"] ? CustomerDetailsModel.fromJS(_data["customer"]) : <any>undefined;
            this.docDate = _data["docDate"];
            this.docTotal = _data["docTotal"];
            this.docStatus = _data["docStatus"];
            this.canceled = _data["canceled"];
            this.candeledDate = _data["candeledDate"];
            this.canceledBy = _data["canceledBy"];
            this.createdBy = _data["createdBy"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
            this.methodPayment = _data["methodPayment"];
        }
    }

    static fromJS(data: any): SalesOrderDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalesOrderDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docNum"] = this.docNum;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["docDate"] = this.docDate;
        data["docTotal"] = this.docTotal;
        data["docStatus"] = this.docStatus;
        data["canceled"] = this.canceled;
        data["candeledDate"] = this.candeledDate;
        data["canceledBy"] = this.canceledBy;
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        data["methodPayment"] = this.methodPayment;
        return data;
    }
}

export interface ISalesOrderDetailsModel {
    docNum?: number;
    customer?: CustomerDetailsModel;
    docDate?: string;
    docTotal?: number;
    docStatus?: string | undefined;
    canceled?: boolean;
    candeledDate?: string;
    canceledBy?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;
    methodPayment?: string | undefined;
}

export class SalesOrderItemDetailsModel implements ISalesOrderItemDetailsModel {
    id?: number;
    docNum?: number;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    comments?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;

    constructor(data?: ISalesOrderItemDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.docNum = _data["docNum"];
            this.itemCode = _data["itemCode"];
            this.unitPrice = _data["unitPrice"];
            this.quantity = _data["quantity"];
            this.total = _data["total"];
            this.lineNum = _data["lineNum"];
            this.reference1 = _data["reference1"];
            this.reference2 = _data["reference2"];
            this.comments = _data["comments"];
            this.createdBy = _data["createdBy"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
        }
    }

    static fromJS(data: any): SalesOrderItemDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalesOrderItemDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["docNum"] = this.docNum;
        data["itemCode"] = this.itemCode;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        data["total"] = this.total;
        data["lineNum"] = this.lineNum;
        data["reference1"] = this.reference1;
        data["reference2"] = this.reference2;
        data["comments"] = this.comments;
        data["createdBy"] = this.createdBy;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        return data;
    }
}

export interface ISalesOrderItemDetailsModel {
    id?: number;
    docNum?: number;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    comments?: string | undefined;
    createdBy?: string | undefined;
    createdAt?: string;
    updatedAt?: string;
}

export class SalesOrderDetailsFullModel implements ISalesOrderDetailsFullModel {
    header?: SalesOrderDetailsModel;
    lines?: SalesOrderItemDetailsModel[] | undefined;

    constructor(data?: ISalesOrderDetailsFullModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.header = _data["header"] ? SalesOrderDetailsModel.fromJS(_data["header"]) : <any>undefined;
            if (Array.isArray(_data["lines"])) {
                this.lines = [] as any;
                for (let item of _data["lines"])
                    this.lines!.push(SalesOrderItemDetailsModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalesOrderDetailsFullModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalesOrderDetailsFullModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["header"] = this.header ? this.header.toJSON() : <any>undefined;
        if (Array.isArray(this.lines)) {
            data["lines"] = [];
            for (let item of this.lines)
                data["lines"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISalesOrderDetailsFullModel {
    header?: SalesOrderDetailsModel;
    lines?: SalesOrderItemDetailsModel[] | undefined;
}

export class SalesOrderCreateModel implements ISalesOrderCreateModel {
    customer?: number;
    docDate?: string;
    paymentMethod?: string | undefined;
    docTotal?: number;
    docStatus?: string | undefined;

    constructor(data?: ISalesOrderCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customer = _data["customer"];
            this.docDate = _data["docDate"];
            this.paymentMethod = _data["paymentMethod"];
            this.docTotal = _data["docTotal"];
            this.docStatus = _data["docStatus"];
        }
    }

    static fromJS(data: any): SalesOrderCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalesOrderCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer;
        data["docDate"] = this.docDate;
        data["paymentMethod"] = this.paymentMethod;
        data["docTotal"] = this.docTotal;
        data["docStatus"] = this.docStatus;
        return data;
    }
}

export interface ISalesOrderCreateModel {
    customer?: number;
    docDate?: string;
    paymentMethod?: string | undefined;
    docTotal?: number;
    docStatus?: string | undefined;
}

export class SalesOrderItemCreateModel implements ISalesOrderItemCreateModel {
    docNum?: number;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    comments?: string | undefined;

    constructor(data?: ISalesOrderItemCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.docNum = _data["docNum"];
            this.itemCode = _data["itemCode"];
            this.unitPrice = _data["unitPrice"];
            this.quantity = _data["quantity"];
            this.total = _data["total"];
            this.lineNum = _data["lineNum"];
            this.reference1 = _data["reference1"];
            this.reference2 = _data["reference2"];
            this.comments = _data["comments"];
        }
    }

    static fromJS(data: any): SalesOrderItemCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalesOrderItemCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["docNum"] = this.docNum;
        data["itemCode"] = this.itemCode;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        data["total"] = this.total;
        data["lineNum"] = this.lineNum;
        data["reference1"] = this.reference1;
        data["reference2"] = this.reference2;
        data["comments"] = this.comments;
        return data;
    }
}

export interface ISalesOrderItemCreateModel {
    docNum?: number;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    comments?: string | undefined;
}

export class SalesOrderItemUpdateModel implements ISalesOrderItemUpdateModel {
    id?: number;
    docNum?: number;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    comments?: string | undefined;

    constructor(data?: ISalesOrderItemUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.docNum = _data["docNum"];
            this.itemCode = _data["itemCode"];
            this.unitPrice = _data["unitPrice"];
            this.quantity = _data["quantity"];
            this.total = _data["total"];
            this.lineNum = _data["lineNum"];
            this.reference1 = _data["reference1"];
            this.reference2 = _data["reference2"];
            this.comments = _data["comments"];
        }
    }

    static fromJS(data: any): SalesOrderItemUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SalesOrderItemUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["docNum"] = this.docNum;
        data["itemCode"] = this.itemCode;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        data["total"] = this.total;
        data["lineNum"] = this.lineNum;
        data["reference1"] = this.reference1;
        data["reference2"] = this.reference2;
        data["comments"] = this.comments;
        return data;
    }
}

export interface ISalesOrderItemUpdateModel {
    id?: number;
    docNum?: number;
    itemCode?: string | undefined;
    unitPrice?: number;
    quantity?: number;
    total?: number;
    lineNum?: number;
    reference1?: string | undefined;
    reference2?: string | undefined;
    comments?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: string;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: string;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}